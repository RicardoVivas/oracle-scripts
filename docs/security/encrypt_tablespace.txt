To start using TDE, the security administrator must create a wallet and set a master key. 
The wallet can be the default database wallet shared with other Oracle Database components, or a separate wallet specifically used by TDE. 
Oracle strongly recommends that you use a separate wallet to store the master encryption key.

By default, the master encryption key is a random key generated by Transparent Data Encryption (TDE). 
It can also be an existing key pair from a PKI certificate designated for encryption. 
To use TDE with PKI key pairs, the issuing certificate authority must be able to issue X.509v3 certificates with the key usage field marked for encryption.
PKI-based encryption does not work with TDE tablespace encryption and hardware security modules. 


To set or reset the master encryption key, use the following command:

SQL> ALTER SYSTEM SET ENCRYPTION KEY ["certificate_ID"] IDENTIFIED BY "password"   // password is case sensitive. Enclose the password string in double quotation marks (" ").


Open/Close Master Key 
SQL> ALTER SYSTEM SET ENCRYPTION WALLET OPEN IDENTIFIED BY "password"
SQL> ALTER SYSTEM SET ENCRYPTION WALLET CLOSE IDENTIFIED BY "password"

Views:
V$ENCRYPTION_WALLET;
V$ENCRYPTED_TABLESPACES
DBA_ENCRYPTED_COLUMNS
V$WALLET
DBA_TABLESPACES: The ENCRYPTED column indicates whether a tablespace is encrypted

The security administrator also needs to open the wallet before performing database recovery operations. This is because background processes may require access to encrypted redo and undo logs.
When performing database recovery, the wallet must be opened before opening the database. This is illustrated in the following statements:

SQL> STARTUP MOUNT;
SQL> ALTER SYSTEM SET ENCRYPTION WALLET OPEN IDENTIFIED BY "password";
SQL> ALTER DATABASE OPEN;


CREATE TABLESPACE securespace
DATAFILE '/app/oracle/oradata/hsun/secure01.dbf'
SIZE 150M
ENCRYPTION
DEFAULT STORAGE(ENCRYPT);




---------- Managing Transparent Data Encryption -------------

When determining which wallet to use, TDE first attempts to use the wallet specified by the parameter ENCRYPTION_WALLET_LOCATION. 
If the parameter is not set, then it attempts to use the wallet specified by the parameter WALLET_LOCATION. 
If this fails as well, then TDE looks for a wallet at the default database location.

Oracle strongly recommends that you use a separate wallet for storing master encryption keys used by TDE. 
To designate a separate wallet, set the ENCRYPTION_WALLET_LOCATION parameter in the sqlnet.ora file to point to the wallet used exclusively by TDE.

ENCRYPTION_WALLET_LOCATION=
  (SOURCE=(METHOD=FILE)(METHOD_DATA=
   (DIRECTORY=/app/wallet)))


---------- Using an Auto Login Wallet ----------

You can create an auto login wallet with Oracle Wallet Manager or the orapki command-line utility. 
The auto login wallet allows convenient access to encrypted data across database instance restarts.

Note:
You should not remove the PKCS#12 wallet (ewallet.p12 file) after the auto login wallet (.sso file) has been created. 
You need the PKCS#12 wallet to regenerate/rekey the master encryption key in future.
TDE uses an auto login wallet only if it is available at the correct location (ENCRYPTION_WALLET_LOCATION, WALLET_LOCATION, or default wallet location),
 and the SQL command to open an encrypted wallet has not already been executed. 
 If an auto login wallet is being used, you must not use the ALTER SYSTEM SET ENCRYPTION WALLET OPEN IDENTIFIED BY "password" command.
Note: no harm done if you run the command

 [ID 988022.1] solved in 11.2.0.2


Oracle recommends placing the Oracle Wallet outside of the $ORACLE_BASE
directory tree to avoid accidentally storing the wallet with the encrypted data on a backup tape, 

$ chmod 600 ewallet.p12

Also, backup the wallet before any manipulation of its content, whether performing a master key re-key 
operation, or changing the wallet password.

Starting with Oracle Database release 11.1.0.7, the ‘orapki’ utility has been enhanced to enable wallet password 
changes from the command line:


-- Don't use this : orapki wallet create -wallet /app/oracle/admin/hsun/tde_wallet 
orapki wallet create -wallet /app/oracle/admin/hsun/tde_wallet  -auto_login_local
orapki wallet display -wallet wallet_location
orapki wallet change_pwd -wallet /app/oracle/admin/hsun/tde_wallet [-oldpwd password ] [-newpwd password]


orapki help
orapki wallet help




2. If dropping the wallet after creating TDE encrypted data (using column or tablespace encryption), the wallet can't be recreated.

This issue has been investigated in:
BUG 11727498 - SECOND WALLET CREATED AFTER DELETE ORIGINAL DOES NOT HAVE TS MASTER KEY
The bug is fixed starting with release 11.2.0.3. For the currently supported releases, patches can be requested.
Whenever recreating the wallet, make sure to do a full log switch rotation and a checkpoint after the wallet has been closed.

orapki wallet export -wallet /app/oracle/admin/hsun/tde_wallet -dn 'cn=oracle'  -request /app/oracle/admin/hsun/tde_wallet/oracle_cert_request
orapki cert create -wallet /app/oracle/admin/hsun/tde_wallet -request /app/oracle/admin/hsun/tde_wallet/oracle_cert_request -cert /app/oracle/admin/hsun/tde_wallet/cert.txt -validity 3650



